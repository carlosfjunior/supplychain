pragma solidity ^0.4.24;

import "../core/Ownable.sol";
import "../accessControl/ConsumerRole.sol";
import "../accessControl/DistributorRole.sol";
import "../accessControl/GrapeGrowerRole.sol";
import "../accessControl/ProducerRole.sol";
import "../accessControl/RetailerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, ConsumerRole, DistributorRole, GrapeGrowerRole, ProducerRole, RetailerRole {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;

  // Define enum 'State' with the following values:
  enum State
  {
    Harvested,      // 0
    GrapesReceived, // 1
    Produced,       // 2
    Stocked,        // 3
    Bottled,        // 4
    ForSale,        // 5
    Sold,           // 6
    Shipped,        // 7
    WineReceived,   // 8
    Purchased       // 9
  }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the GrapeGrower, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 10 stages
    address originGrapeGrowerID; // Metamask-Ethereum address of the GrapeGrower
    string  originVineyardName; // Vineyard Name
    string  originVineyardInformation;  // Vineyard Information
    string  originVineyardLatitude; // Vineyard Latitude
    string  originVineyardLongitude;  // Vineyard Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address producerID;  // Metamask-Ethereum address of the Producer
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 10 events with the same 10 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event GrapesReceived(uint upc);
  event Produced(uint upc);
  event Stocked(uint upc);
  event Bottled(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event WineReceived(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address);
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price);
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is GrapesReceived
  modifier grapesReceived(uint _upc) {
    require(items[_upc].itemState == State.GrapesReceived);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Produced
  modifier produced(uint _upc) {
    require(items[_upc].itemState == State.Produced);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Stocked
  modifier stocked(uint _upc) {
    require(items[_upc].itemState == State.Stocked);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Bottled
  modifier bottled(uint _upc) {
    require(items[_upc].itemState == State.Bottled);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is WineReceived
  modifier wineReceived(uint _upc) {
    require(items[_upc].itemState == State.WineReceived);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  // Define a function 'harvestItem' that allows a grapeGrower to mark an item 'Harvested'
  function harvestItem(uint _upc, address _originGrapeGrowerID, string _originVineyardName, string _originVineyardInformation,
    string  _originVineyardLatitude, string  _originVineyardLongitude, string  _productNotes) public
  {
    // Add the new item as part of Harvest
    items[_upc] = Item({sku: sku, upc: _upc, ownerID: msg.sender, originGrapeGrowerID: _originGrapeGrowerID,
      originVineyardName: _originVineyardName, originVineyardInformation: _originVineyardInformation,
      originVineyardLatitude: _originVineyardLatitude, originVineyardLongitude: _originVineyardLongitude,
      productID: _upc + sku, productNotes: _productNotes, productPrice: 0, itemState: State.Harvested,
      producerID: 0, distributorID: 0, retailerID: 0, consumerID: 0});
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Harvested(_upc);
  }

  // Define a function 'receiveGrapes' that allows the retailer to mark an item 'GrapesReceived'
  // Use the above modifiers to check if the item is shipped
  function receiveGrapes(uint _upc) public
    // Call modifier to check if upc has passed previous supply chain stage
    harvested(_upc)
    // Access Control List enforced by calling Smart Contract /
    onlyProducer
    {
    // Update the appropriate fields - ownerID, producerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].producerID = msg.sender;
    items[_upc].itemState = State.GrapesReceived;
    // Emit the appropriate event
    emit GrapesReceived(_upc);
  }

  // Define a function 'produceItem' that allows a grapeGrower to mark an item 'Produced'
  function produceItem(uint _upc) public
  // Call modifier to check if upc has passed previous supply chain stage
  grapesReceived(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].producerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Produced;
    // Emit the appropriate event
    emit Produced(_upc);
  }

  // Define a function 'stockItem' that allows a farmer to mark an item 'Stocked'
  function stockItem(uint _upc) public
  // Call modifier to check if upc has passed previous supply chain stage
  produced(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].producerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Stocked;
    // Emit the appropriate event
    emit Stocked(_upc);
  }

  // Define a function 'bottleItem' that allows a farmer to mark an item 'Bottled'
  function bottleItem(uint _upc) public
  // Call modifier to check if upc has passed previous supply chain stage
  stocked(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].producerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Bottled;
    // Emit the appropriate event
    emit Bottled(_upc);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public
  // Call modifier to check if upc has passed previous supply chain stage
  bottled(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].producerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.ForSale;
    items[_upc].productPrice = _price;
    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable
  // Call modifier to check if upc has passed previous supply chain stage
  forSale(_upc)
  // Call modifer to check if buyer has paid enough
  paidEnough(items[_upc].productPrice)
  // Call modifer to send any excess ether back to buyer
  checkValue(_upc)
  {
    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    items[_upc].itemState = State.Sold;
    // Transfer money to producer
    items[_upc].originGrapeGrowerID.transfer(items[_upc].productPrice);
    // emit the appropriate event
    emit Sold(_upc);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc) public
    // Call modifier to check if upc has passed previous supply chain stage
    sold(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].distributorID)
    {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveWine' that allows the retailer to mark an item 'WineReceived'
  // Use the above modifiers to check if the item is shipped
  function receiveWine(uint _upc) public
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    // Access Control List enforced by calling Smart Contract /
    onlyRetailer
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.WineReceived;
    // Emit the appropriate event
    emit WineReceived(_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) public
    // Call modifier to check if upc has passed previous supply chain stage
    wineReceived(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyConsumer
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.Purchased;
    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originGrapeGrowerID,
  string  originVineyardName,
  string  originVineyardInformation,
  string  originVineyardLatitude,
  string  originVineyardLongitude
  )
  {
    // Assign values to the 8 parameters

    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    ownerID = items[_upc].ownerID;
    originGrapeGrowerID = items[_upc].originGrapeGrowerID;
    originVineyardName = items[_upc].originVineyardName;
    originVineyardInformation = items[_upc].originVineyardInformation;
    originVineyardLatitude = items[_upc].originVineyardLatitude;
    originVineyardLongitude = items[_upc].originVineyardLongitude;

  return
  (
  itemSKU,
  itemUPC,
  ownerID,
  originGrapeGrowerID,
  originVineyardName,
  originVineyardInformation,
  originVineyardLatitude,
  originVineyardLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address producerID,
  address distributorID,
  address retailerID,
  address consumerID
  )
  {
    // Assign values to the 10 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    productPrice = items[_upc].productPrice;
    itemState = uint(items[_upc].itemState);
    producerID = items[_upc].producerID;
    distributorID = items[_upc].distributorID;
    retailerID = items[_upc].retailerID;
    consumerID = items[_upc].consumerID;

  return
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  producerID,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
