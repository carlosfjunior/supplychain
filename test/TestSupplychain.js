// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originGrapeGrowerID = accounts[1]
    const originVineyardName = "John Doe"
    const originVineyardInformation = "Yarray Valley"
    const originVineyardLatitude = "-38.239770"
    const originVineyardLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best wine"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const producerID = accounts[2]
    const distributorID = accounts[3]
    const retailerID = accounts[4]
    const consumerID = accounts[5]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0xd112ccdfefb60b37505f482f6d471e2d7137eda6 (~100 ETH)
    ///(1) 0xe92305e6a629813a748eeed4db7f1fbeb7e32ce8 (~100 ETH)
    ///(2) 0xde9f341dc069f2384afe3b66112ca69b2fd1459d (~100 ETH)
    ///(3) 0x5135e1c60ec301e5265c1e28be6bdb8972690e97 (~100 ETH)
    ///(4) 0x91dccf1b8ced8ebd84a5aefe2b286b93a7d6d2ef (~100 ETH)
    ///(5) 0x11ee66fdcf5800161dd291c6c3d84cdcb2423d1b (~100 ETH)
    ///(6) 0x019ea91f3403d43d488ce4c0c077253131de5134 (~100 ETH)
    ///(7) 0xa8adfb3a70cb2c77f33472a54f33036f6d790abc (~100 ETH)
    ///(8) 0x227833bca3f5ac6e6a9ce9353fbd22e4de0e388f (~100 ETH)
    ///(9) 0x125e8e299f1367e09ab9870932fa1cb4ea7edf1f (~100 ETH)

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("GrapeGrower: accounts[1] ", accounts[1])
    console.log("Producer: accounts[2] ", accounts[2])
    console.log("Distributor: accounts[3] ", accounts[3])
    console.log("Retailer: accounts[4] ", accounts[4])
    console.log("Consumer: accounts[5] ", accounts[5])

    before(async() => {
        const supplyChain = await SupplyChain.deployed()

        await supplyChain.addGrapeGrower(originGrapeGrowerID);
        await supplyChain.addProducer(producerID);
        await supplyChain.addDistributor(distributorID);
        await supplyChain.addRetailer(retailerID);
        await supplyChain.addConsumer(consumerID);
        
    });

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a grape grower to harvest grapes", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        var event = supplyChain.Harvested()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originGrapeGrowerID, originVineyardName, originVineyardInformation, originVineyardLatitude, originVineyardLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originGrapeGrowerID, 'Error: Missing or Invalid originGrapeGrowerID')
        assert.equal(resultBufferOne[4], originVineyardName, 'Error: Missing or Invalid originVineyardName')
        assert.equal(resultBufferOne[5], originVineyardInformation, 'Error: Missing or Invalid originVineyardInformation')
        assert.equal(resultBufferOne[6], originVineyardLatitude, 'Error: Missing or Invalid originVineyardLatitude')
        assert.equal(resultBufferOne[7], originVineyardLongitude, 'Error: Missing or Invalid originVineyardLongitude')
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function receiveGrapes() that allows a producer to mark grapes received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event GrapesReceived()
        var event = supplyChain.GrapesReceived()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as GrapesReceived by calling function receiveGrapes()
        await supplyChain.receiveGrapes(upc, {from: producerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], producerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], producerID, 'Error: Missing or Invalid item producerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    // 3rd Test
    it("Testing smart contract function produceItem() that allows a producer to produce wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Produced()
        var event = supplyChain.Produced()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Produced by calling function produceItem()
        await supplyChain.produceItem(upc, {from: producerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })
    
    // 4rd Test
    it("Testing smart contract function stockItem() that allows a producer to stock wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Stocked()
        var event = supplyChain.Stocked()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Stocked by calling function stockItem()
        await supplyChain.stockItem(upc, {from: producerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })
    
    // 5rd Test
    it("Testing smart contract function bottleItem() that allows a producer to bottle up wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Bottled()
        var event = supplyChain.Bottled()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Bottled by calling function bottleItem()
        await supplyChain.bottleItem(upc, {from: producerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })

    // 6th Test
    it("Testing smart contract function sellItem() that allows a producer to sell wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, {from: producerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
          
    })    

    // 7th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: distributorID, value: web3.toWei(1, "ether")})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], distributorID, 'Error: Missing or Invalid item distributorID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })    

    // 8th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Shipped by calling function shipItem()
        await supplyChain.shipItem(upc, {from: distributorID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
              
    })    

    // 9th Test
    it("Testing smart contract function receiveWine() that allows a retailer to mark wine received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event WineReceived()
        var event = supplyChain.WineReceived()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as WineReceived by calling function receiveWine()
        await supplyChain.receiveWine(upc, {from: retailerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[8], retailerID, 'Error: Missing or Invalid item retailerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
             
    })    

    // 10th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        var event = supplyChain.Purchased()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Purchased by calling function purchaseItem()
        await supplyChain.purchaseItem(upc, {from: consumerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 9, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[9], consumerID, 'Error: Missing or Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })    

    // 11th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originGrapeGrowerID, 'Error: Missing or Invalid originGrapeGrowerID')
        assert.equal(resultBufferOne[4], originVineyardName, 'Error: Missing or Invalid originVineyardName')
        assert.equal(resultBufferOne[5], originVineyardInformation, 'Error: Missing or Invalid originVineyardInformation')
        assert.equal(resultBufferOne[6], originVineyardLatitude, 'Error: Missing or Invalid originVineyardLatitude')
        assert.equal(resultBufferOne[7], originVineyardLongitude, 'Error: Missing or Invalid originVineyardLongitude')
        
    })

    // 12th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], 9, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], producerID, 'Error: Missing or Invalid producerID')
        assert.equal(resultBufferTwo[7], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[8], retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[9], consumerID, 'Error: Missing or Invalid consumerID')
        
    })

});

